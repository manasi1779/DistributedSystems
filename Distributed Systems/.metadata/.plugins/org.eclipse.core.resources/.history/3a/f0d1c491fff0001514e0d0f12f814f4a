/**
 * The algorithm is defined through two rules, the marker receiving rule and the
marker sending rule. The marker sending rule obligates processes to send
a marker after they have recorded their state, but before they send any other messages.
The marker receiving rule obligates a process that has not recorded its state to do
so. In that case, this is the first marker that it has received. It notes which messages
subsequently arrive on the other incoming channels. When a process that has already
saved its state receives a marker (on another channel), it records the state of that channel
as the set of messages it has received on it since it saved its state.
 */

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;
import java.util.Scanner;

public class Snapshot{
	Socket peer[] = new Socket[2];
	ObjectOutputStream[] oos = new ObjectOutputStream[2];
	Message marker;
	ObjectInputStream[] ios = new ObjectInputStream[2];
	int balance = 1000;
	String processName;
	
	public Snapshot(String process){
		processName = process;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Snapshot snapshot = new Snapshot(args[0]);
	}
	
	public void start(){
		try {
			ServerSocket server = new ServerSocket(9991);
			for(int i=0; i<2;i++){				
				peer[i] = server.accept();
				oos[i] = new ObjectOutputStream(peer[i].getOutputStream());
				ios[i] = new ObjectInputStream(peer[i].getInputStream());
				Scanner s = new Scanner(peer[i].getInputStream());
				BufferedWriter bw = new BufferedWriter(new PrintWriter(peer[i].getOutputStream()));
			}	
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void withDraw(int amount){
		balance -= amount;
	}
	
	public void deposit(int amount){
		balance += amount;
	}
	
	public void sendMoney(int process, int amount){
		try {
			withDraw(amount);
			oos[process].writeChars("SEND");
			oos[process].writeInt(amount);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void getMoney(int process){
		DataInputStream dis = new DataInputStream(peer[0].getInputStream());
		dis.
		ios[process].re
	}
	
	
	public void transact(){
		long initialTime = System.currentTimeMillis();
		while(true){
			long currentTime = System.currentTimeMillis();
			if(processName.equals("process1") && (currentTime - initialTime)%2000 == 0 ){
				recordState();
				recordChannel();
			}			
			if((currentTime - initialTime)%1000 == 0 ){
				Random random = new Random();
				sendMoney(random.nextInt(1),random.nextInt(balance/3));
			}
		}
	}
	
	public void getSnapShot(){
		
	}
	
	public void recordState(){
		
	}
	
	public void recordChannel(){
		
	}


}
