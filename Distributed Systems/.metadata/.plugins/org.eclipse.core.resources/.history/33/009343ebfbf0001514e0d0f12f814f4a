import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;

public class Snapshot{
	Socket peer[] = new Socket[2];
	ObjectOutputStream[] oos = new ObjectOutputStream[2];
	Message marker;
	ObjectInputStream[] ios = new ObjectInputStream[2];
	int balance = 1000;
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	
	public void start(){
		try {
			ServerSocket server = new ServerSocket(9991);
			for(int i=0; i<2;i++){				
				peer[i] = server.accept();
				oos[i] = new ObjectOutputStream(peer[i].getOutputStream());
				ios[i] = new ObjectInputStream(peer[i].getInputStream());
			}	
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void withDraw(int amount){
		balance -= amount;
	}
	
	public void deposit(int amount){
		balance += amount;
	}
	
	public void sendMoney(int process, int amount){
		try {
			withDraw(amount);
			oos[process].writeChars("SEND");
			oos[process].writeInt(amount);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void transact(){
		long initialTime = System.currentTimeMillis();
		while(true){
			long currentTime = System.currentTimeMillis();
			if((currentTime - initialTime)%2000 == 0 ){
				recordState();
				recordChannel();
			}			
			if((currentTime - initialTime)%1000 == 0 ){
				Random random = new Random();
				sendMoney(random.nextInt(1),random.nextInt(balance/3));
			}
		}
	}
	
	public void getSnapShot(){
		
	}
	
	public void recordState(){
		
	}
	
	public void recordChannel(){
		
	}


}
