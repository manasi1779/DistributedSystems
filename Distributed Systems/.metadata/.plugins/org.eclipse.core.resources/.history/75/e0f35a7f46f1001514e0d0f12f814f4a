/**
 * The algorithm is defined through two rules, the marker receiving rule and the
marker sending rule. The marker sending rule obligates processes to send
a marker after they have recorded their state, but before they send any other messages.
The marker receiving rule obligates a process that has not recorded its state to do
so. In that case, this is the first marker that it has received. It notes which messages
subsequently arrive on the other incoming channels. When a process that has already
saved its state receives a marker (on another channel), it records the state of that channel
as the set of messages it has received on it since it saved its state.
 */

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;
import java.util.Scanner;

public class Snapshot implements Runnable{
	static long initialTime;
	static State snapshot;
	Socket peer[] = new Socket[2];
	private int port;
	static ObjectOutputStream[] oos = new ObjectOutputStream[2];
	static Scanner[] s = new Scanner[2];
	static BufferedWriter[] bw = new BufferedWriter[2]; 
	static Message marker;
	static ObjectInputStream[] ios = new ObjectInputStream[2];
	static int balance = 1000;
	static String processName;
	static String state = "transact";
	static int markersReceived = 0;
	static int ports[];
	
	static{
		int p = 9991;
		for(int i=0; i<3; i++){
			ports[i] = p++;
		}
	}
	
	public Snapshot(String process, String port){
		processName = process;
		this.port = Integer.parseInt(port);
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Snapshot snapshot = new Snapshot(args[0], args[1]);
		snapshot.start();
	}
	
	public void start(){
		try {
			
			ServerSocket server = new ServerSocket(port);
			for(int i =0; i < 3; i++){
				if(ports[i]!=port)
					new Socket("localhost", ports[i]);
			}
			for(int i=0; i<2;i++){
				oos[i] = new ObjectOutputStream(peer[i].getOutputStream());
				ios[i] = new ObjectInputStream(peer[i].getInputStream());
				s[i] = new Scanner(ios[i]);
				bw[i] = new BufferedWriter(new PrintWriter(oos[i]));
			}	
			initialTime = System.currentTimeMillis();
			Thread thread1 = new Thread(this,"readChannel");
			Thread thread2 = new Thread(this,"readChannel2");
			Thread thread3 = new Thread(this,"writeChannel");
			Thread thread4 = new Thread(this,"record");
			thread1.start();
			thread2.start();
			thread3.start();
			thread4.start();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void withDraw(int amount){
		balance -= amount;
	}
	
	public void deposit(int amount){
		balance += amount;
	}
	
	public void sendMoney(int process, int amount){
		try {
			withDraw(amount);
			bw[process].write("SEND");
			bw[process].write(amount);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public int getMoney(int process){
		 int amount =0;
		if(s[process].hasNext()){
			 amount = s[process].nextInt();
		}
		deposit(amount);
		return amount;
	}
	
	public void readMarker(int process){
		Message m;
		if(s[process].hasNext()){
				try {
					m = (Message) ios[process].readObject();					
				} catch (ClassNotFoundException | IOException e) {
					e.printStackTrace();
				}
			}
	}
	
	
	public void transact(){
		while(!state.equals("record")){
			long currentTime = System.currentTimeMillis();
			if(processName.equals("process1") && (currentTime - initialTime)%2000 == 0 ){
				state = "record";
			}			
			if((currentTime - initialTime)%1000 == 0 ){
				Random random = new Random();
				sendMoney(random.nextInt(1),random.nextInt(balance/3));
			}
		}
	}

	public void getSnapShot(){
		
		if(state.equals("record")){
			System.out.println(state);
			recordState();
			marker = new Message("Marker");
			sendMarker();
			state = "transact";
			recordChannel();
		}
	}
	
	public void sendMarker() {
		for(int i =0; i< 2; i++){
			try {
				bw[i].write("Marker");
				oos[i].writeObject(marker);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	public void recordState(){
		snapshot = new State(2);
		snapshot.state = balance;
	}
	
	public void recordChannel(){
		state = "recording";
		System.out.println(state);
	}
	
	public void readChannel(int process){
		while(!state.equals("record")){
			if(state.equals("recording")){
				String command = s[process].nextLine();
				if(command.equals("SEND")){					
					int received = getMoney(process);
					snapshot.channels[process].state += received;					
				}
				else{					
					readMarker(process);
					markersReceived++;
					if(markersReceived==2)
						stopRecording();
				}
			}
			else{
				if(s[process].hasNext()){
					String command = s[process].nextLine();
					if(command.equals("SEND")){
						getMoney(0);
					}
					else{
						readMarker(process);
						state = "record";
					}
				}
			}
		}
	}

	private void stopRecording() {
		state = "transact";
		System.out.println(state);
		System.out.println("own state: "+snapshot.state );
		for(int i =0; i < 2; i++){
			System.out.println("Incoming channel "+i+" "+snapshot.channels[i].state);
		}
	}

	@Override
	public void run() {
		String name = Thread.currentThread().getName();
		switch(name){
		case "readChannel1":{
			while(true){
				readChannel(0);
			}
		}
		case "readChannel2":{
			while(true){
				readChannel(1);
			}
		}
		case "writeChannel":{
			while(true){
				transact();
			}
		}
		case "record":{
			while(true){
				getSnapShot();
			}
		}
		}
	}
}

class State{
	int state;
	Channel channels[];
	public State(int noOfchannels){
		channels = new Channel[noOfchannels];
		for(int i =0; i<noOfchannels; i++){
			channels[i] = new Channel();
		}
	}	
}

class Channel{
	int state;
}


